[{"/home/namdang/_workspace/_repos/my_github/chat-app/src/index.tsx":"1","/home/namdang/_workspace/_repos/my_github/chat-app/src/reportWebVitals.ts":"2","/home/namdang/_workspace/_repos/my_github/chat-app/src/App.tsx":"3","/home/namdang/_workspace/_repos/my_github/chat-app/src/components/index.ts":"4","/home/namdang/_workspace/_repos/my_github/chat-app/src/components/FakeAuth.tsx":"5","/home/namdang/_workspace/_repos/my_github/chat-app/src/components/ChannelListContainer.tsx":"6","/home/namdang/_workspace/_repos/my_github/chat-app/src/components/ChannelContainer.tsx":"7","/home/namdang/_workspace/_repos/my_github/chat-app/src/components/ChannelList.tsx":"8","/home/namdang/_workspace/_repos/my_github/chat-app/src/components/ChannelInner.tsx":"9","/home/namdang/_workspace/_repos/my_github/chat-app/src/components/CreateChannel.tsx":"10","/home/namdang/_workspace/_repos/my_github/chat-app/src/components/TeamChannelList.tsx":"11","/home/namdang/_workspace/_repos/my_github/chat-app/src/components/UserList.tsx":"12","/home/namdang/_workspace/_repos/my_github/chat-app/src/components/EditChannel.tsx":"13","/home/namdang/_workspace/_repos/my_github/chat-app/src/services/request.ts":"14","/home/namdang/_workspace/_repos/my_github/chat-app/src/context/context.ts":"15","/home/namdang/_workspace/_repos/my_github/chat-app/src/assets/index.js":"16","/home/namdang/_workspace/_repos/my_github/chat-app/src/constants/index.ts":"17","/home/namdang/_workspace/_repos/my_github/chat-app/src/assets/ChannelInfo.js":"18","/home/namdang/_workspace/_repos/my_github/chat-app/src/assets/InviteIcon.js":"19","/home/namdang/_workspace/_repos/my_github/chat-app/src/assets/SearchIcon.js":"20","/home/namdang/_workspace/_repos/my_github/chat-app/src/assets/LightningBolt.js":"21","/home/namdang/_workspace/_repos/my_github/chat-app/src/assets/AddChannel.tsx":"22","/home/namdang/_workspace/_repos/my_github/chat-app/src/assets/CloseCreateChannel.tsx":"23","/home/namdang/_workspace/_repos/my_github/chat-app/src/components/Chat.tsx":"24","/home/namdang/_workspace/_repos/my_github/chat-app/src/context/ChatContext.tsx":"25","/home/namdang/_workspace/_repos/my_github/chat-app/src/components/Channel.tsx":"26","/home/namdang/_workspace/_repos/my_github/chat-app/src/components/MessageText.tsx":"27","/home/namdang/_workspace/_repos/my_github/chat-app/src/components/ChannelSearch.jsx":"28","/home/namdang/_workspace/_repos/my_github/chat-app/src/components/ResultsDropdown.jsx":"29"},{"size":495,"mtime":1667606770483,"results":"30","hashOfConfig":"31"},{"size":425,"mtime":1667605538052,"results":"32","hashOfConfig":"31"},{"size":969,"mtime":1667692287219,"results":"33","hashOfConfig":"31"},{"size":894,"mtime":1667720963759,"results":"34","hashOfConfig":"31"},{"size":1446,"mtime":1667609285211,"results":"35","hashOfConfig":"31"},{"size":3713,"mtime":1667660104942,"results":"36","hashOfConfig":"31"},{"size":1310,"mtime":1667720842513,"results":"37","hashOfConfig":"31"},{"size":1196,"mtime":1667659097225,"results":"38","hashOfConfig":"31"},{"size":3346,"mtime":1667721661794,"results":"39","hashOfConfig":"31"},{"size":2022,"mtime":1667619557030,"results":"40","hashOfConfig":"31"},{"size":2524,"mtime":1667720073714,"results":"41","hashOfConfig":"31"},{"size":2726,"mtime":1667619282824,"results":"42","hashOfConfig":"31"},{"size":1868,"mtime":1667658477327,"results":"43","hashOfConfig":"31"},{"size":3502,"mtime":1667636342930,"results":"44","hashOfConfig":"31"},{"size":2106,"mtime":1667721314630,"results":"45","hashOfConfig":"31"},{"size":281,"mtime":1667659395966,"results":"46","hashOfConfig":"31"},{"size":1384,"mtime":1667614014375,"results":"47","hashOfConfig":"31"},{"size":757,"mtime":1667625215453,"results":"48","hashOfConfig":"31"},{"size":1093,"mtime":1667615818472,"results":"49","hashOfConfig":"31"},{"size":468,"mtime":1667615206832,"results":"50","hashOfConfig":"31"},{"size":521,"mtime":1667625220845,"results":"51","hashOfConfig":"31"},{"size":870,"mtime":1667614710885,"results":"52","hashOfConfig":"31"},{"size":936,"mtime":1667619534299,"results":"53","hashOfConfig":"31"},{"size":591,"mtime":1667711324758,"results":"54","hashOfConfig":"31"},{"size":768,"mtime":1667711451736,"results":"55","hashOfConfig":"31"},{"size":639,"mtime":1667720612556,"results":"56","hashOfConfig":"31"},{"size":125,"mtime":1667720815457,"results":"57","hashOfConfig":"31"},{"size":1961,"mtime":1667720423086,"results":"58","hashOfConfig":"31"},{"size":3114,"mtime":1667721013547,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"176c7pj",{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"62"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"62"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"62"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/namdang/_workspace/_repos/my_github/chat-app/src/index.tsx",[],["124","125"],"/home/namdang/_workspace/_repos/my_github/chat-app/src/reportWebVitals.ts",[],"/home/namdang/_workspace/_repos/my_github/chat-app/src/App.tsx",[],"/home/namdang/_workspace/_repos/my_github/chat-app/src/components/index.ts",[],"/home/namdang/_workspace/_repos/my_github/chat-app/src/components/FakeAuth.tsx",[],"/home/namdang/_workspace/_repos/my_github/chat-app/src/components/ChannelListContainer.tsx",[],"/home/namdang/_workspace/_repos/my_github/chat-app/src/components/ChannelContainer.tsx",[],"/home/namdang/_workspace/_repos/my_github/chat-app/src/components/ChannelList.tsx",[],"/home/namdang/_workspace/_repos/my_github/chat-app/src/components/ChannelInner.tsx",["126"],"/home/namdang/_workspace/_repos/my_github/chat-app/src/components/CreateChannel.tsx",["127"],"import React, { useState } from 'react';\n\nimport { UserList } from '.';\nimport { CloseCreateChannel } from '../assets';\nimport CONSTANTS from '../constants';\nimport ServiceRequest from '../services/request';\n\ninterface IChannelNameInputProps {\n\tchannelName?: string;\n\tsetChannelName: any;\n}\ninterface ICreateChannelProps {\n\tcreateType: number;\n\tsetIsCreating: (d: boolean) => void;\n}\n\nconst ChannelNameInput = ({ channelName = '', setChannelName }: IChannelNameInputProps) => {\n\tconst handleChange = (event: any) => {\n\t\tevent.preventDefault();\n\n\t\tsetChannelName(event.target.value);\n\t};\n\n\treturn (\n\t\t<div className='channel-name-input__wrapper'>\n\t\t\t<p>Name</p>\n\t\t\t<input value={channelName} onChange={handleChange} placeholder='channel-name' />\n\t\t\t<p>Add Members</p>\n\t\t</div>\n\t);\n};\n\nconst CreateChannel = ({ createType, setIsCreating }: ICreateChannelProps) => {\n\tconst [selectedUserIds, setSelectedUserIds] = useState<number[]>([]);\n\tconst [channelName, setChannelName] = useState('');\n\n\tconst createChannel = async (e: any) => {\n\t\te.preventDefault();\n\n\t\ttry {\n\t\t\tconst newChannel = await ServiceRequest.createConversation({\n\t\t\t\ttype: createType,\n\t\t\t\tname: channelName,\n\t\t\t\tmemberIds: selectedUserIds\n\t\t\t});\n\n\t\t\tsetChannelName('');\n\t\t\tsetIsCreating(false);\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className='create-channel__container'>\n\t\t\t<div className='create-channel__header'>\n\t\t\t\t<p>{createType === CONSTANTS.CONVERSATION.TYPE.GROUP ? 'Create a New Channel' : 'Send a Direct Message'}</p>\n\t\t\t\t<CloseCreateChannel setIsCreating={setIsCreating} />\n\t\t\t</div>\n\t\t\t{createType === CONSTANTS.CONVERSATION.TYPE.GROUP && <ChannelNameInput channelName={channelName} setChannelName={setChannelName} />}\n\t\t\t<UserList setSelectedUserIds={setSelectedUserIds} />\n\t\t\t<div className='create-channel__button-wrapper' onClick={createChannel}>\n\t\t\t\t<p>{createType === CONSTANTS.CONVERSATION.TYPE.GROUP ? 'Create Channel' : 'Create Message Group'}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default CreateChannel;\n","/home/namdang/_workspace/_repos/my_github/chat-app/src/components/TeamChannelList.tsx",[],"/home/namdang/_workspace/_repos/my_github/chat-app/src/components/UserList.tsx",["128"],"import React, { useEffect, useState } from 'react';\nimport { InviteIcon } from '../assets';\nimport { IUser } from '../services/interfaces';\nimport Avatar from 'react-avatar';\nimport ServiceRequest from '../services/request';\n\ninterface IListContainerProps {\n\tchildren: JSX.Element | JSX.Element[];\n}\ninterface IUserItemProps {\n\tindex: number;\n\tkey: number;\n\tuser: IUser;\n\tsetSelectedUserIds: any;\n}\ninterface IUserListProps {\n\tsetSelectedUserIds: (userIds: number[]) => void;\n}\n\nconst ListContainer = ({ children }: IListContainerProps) => {\n\treturn (\n\t\t<div className='user-list__container'>\n\t\t\t<div className='user-list__header'>\n\t\t\t\t<p>User</p>\n\t\t\t\t<p>Invite</p>\n\t\t\t</div>\n\t\t\t{children}\n\t\t</div>\n\t);\n};\n\nconst UserItem = ({ index, key, user, setSelectedUserIds }: IUserItemProps) => {\n\tconst [selected, setSelected] = useState(false);\n\n\tconst handleSelect = () => {\n\t\tif (selected) {\n\t\t\tsetSelectedUserIds((prevUserIds: number[]) => prevUserIds.filter((prevId) => prevId !== user.id));\n\t\t} else {\n\t\t\tsetSelectedUserIds((prevUserIds: number[]) => [...prevUserIds, user.id]);\n\t\t}\n\n\t\tsetSelected((prevSelected) => !prevSelected);\n\t};\n\n\treturn (\n\t\t<div className='user-item__wrapper' onClick={handleSelect}>\n\t\t\t<div className='user-item__name-wrapper'>\n\t\t\t\t<Avatar src={user.avatar} name={user.username} size='32' />\n\t\t\t\t<p className='user-item__name'>{user.username || user.id}</p>\n\t\t\t</div>\n\t\t\t{selected ? <InviteIcon /> : <div className='user-item__invite-empty' />}\n\t\t</div>\n\t);\n};\n\nconst UserList = ({ setSelectedUserIds }: IUserListProps) => {\n\tconst [users, setUsers] = useState<IUser[]>([]);\n\tconst [loading, setLoading] = useState(false);\n\tconst [listEmpty, setListEmpty] = useState(false);\n\tconst [error, setError] = useState(false);\n\n\tuseEffect(() => {\n\t\tconst getUsers = async () => {\n\t\t\tif (loading) return;\n\n\t\t\tsetLoading(true);\n\n\t\t\ttry {\n\t\t\t\tconst _users = await ServiceRequest.getAllUsers();\n\n\t\t\t\tif (_users.length) {\n\t\t\t\t\tsetUsers(_users);\n\t\t\t\t} else {\n\t\t\t\t\tsetListEmpty(true);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tsetError(true);\n\t\t\t}\n\t\t\tsetLoading(false);\n\t\t};\n\n\t\tgetUsers();\n\t}, []);\n\n\tif (error) {\n\t\treturn (\n\t\t\t<ListContainer>\n\t\t\t\t<div className='user-list__message'>\n\t\t\t\t\tError loading, please refresh and try again.\n\t\t\t\t</div>\n\t\t\t</ListContainer>\n\t\t);\n\t}\n\n\tif (listEmpty) {\n\t\treturn (\n\t\t\t<ListContainer>\n\t\t\t\t<div className='user-list__message'>\n\t\t\t\t\tNo users found.\n\t\t\t\t</div>\n\t\t\t</ListContainer>\n\t\t);\n\t}\n\n\treturn (\n\t\t<ListContainer>\n\t\t\t{loading ? <div className='user-list__message'>\n\t\t\t\tLoading users...\n\t\t\t</div> : (\n\t\t\t\tusers?.map((user, i) => (\n\t\t\t\t\t<UserItem index={i} key={user.id} user={user} setSelectedUserIds={setSelectedUserIds} />\n\t\t\t\t))\n\t\t\t)}\n\t\t</ListContainer>\n\t);\n};\n\nexport default UserList;\n","/home/namdang/_workspace/_repos/my_github/chat-app/src/components/EditChannel.tsx",[],"/home/namdang/_workspace/_repos/my_github/chat-app/src/services/request.ts",["129","130"],"import { CreateConversationDto } from './dto';\nimport { IConversation, IConversationDetail, IMessageData, IUser } from './interfaces';\nimport axios, { AxiosResponse } from 'axios';\nimport * as _ from 'lodash';\nimport Cookies from 'universal-cookie';\n\nconst cookies = new Cookies();\n\ninterface IGetQueryOptions {\n\tlimit?: number;\n\toffset?: number;\n}\n\nfunction checkResponse(data: any, status?: number) {\n\tif (!status) return;\n\tif (status < 400) return;\n\tthrow Error(`[ServiceRequest] return error - ${data}`);\n}\nfunction setAxiosHeaderAuthen(token: string) {\n\t// tslint:disable-next-line: no-string-literal\n\taxios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n}\n\nexport const apiServer = 'http://localhost:3000';\nconst paths = {\n\tusers: 'users',\n\tconversations: 'conversations',\n\tfake: 'fake',\n};\n\naxios.defaults.baseURL = apiServer;\naxios.defaults.headers.common['Content-Type'] = 'application/json';\n// axios.defaults.transformResponse = (data, data1, statusCode) => {\n// \tlet resp\n// \ttry {\n// \t\tcheckResponse( data, statusCode );\n// \t\tresp = JSON.parse(data)\n\n// \t\treturn resp;\n// \t} catch (error) {\n// \t\tthrow Error(`[ServiceRequest] Error parsing response JSON data - ${JSON.stringify(error)}`)\n// \t}\n// }\n\nif (cookies.get('token')) {\n\tsetAxiosHeaderAuthen(cookies.get('token'));\n}\n\ninterface IObject { [key: string]: any; }\n\nfunction getQueryString(query: IObject): string {\n\tif (!_.keys(query).length) return '';\n\n\treturn _.reduce(query, (res, value, key) => {\n\t\tres += key + '=' + encodeURIComponent(value);\n\t\treturn res;\n\t}, '?');\n}\n\nclass ServiceRequest {\n\n\tstatic async login(userId: string | number) {\n\t\tconst token = await (await axios.post(paths.fake + '/login', { userId })).data;\n\n\t\tif (!token) throw Error('Token error');\n\t\tsetAxiosHeaderAuthen(token);\n\t\treturn token;\n\t}\n\n\tstatic async getUser(): Promise<IUser> {\n\t\tconst user = await (await axios.get(paths.users + '/detail')).data;\n\t\tlocalStorage.setItem('user', JSON.stringify(user));\n\t\treturn user;\n\t}\n\n\tstatic async getAllUsers(): Promise<IUser[]> {\n\t\tconst users = await (await axios.get(paths.users)).data;\n\t\treturn users;\n\t}\n\n\tstatic async createConversation(data: CreateConversationDto): Promise<IConversation[]> {\n\t\tconst basicConversationInfos = await (await axios.post(paths.conversations, data)).data;\n\t\treturn basicConversationInfos;\n\t}\n\n\tstatic async getConversationInfos(): Promise<IConversation[]> {\n\t\tconst basicConversationInfos = await (await axios.get(paths.conversations)).data;\n\t\treturn basicConversationInfos;\n\t}\n\n\tstatic async getConversationDetail(conversationId: string): Promise<IConversationDetail> {\n\t\tconst conversation = await (await axios.get(`${paths.conversations}/${conversationId}`)).data;\n\t\treturn conversation;\n\t}\n\n\tstatic async getConversationMessages(conversationId: number | string, options?: IGetQueryOptions): Promise<IMessageData[]> {\n\t\tconst queryStr = options ? getQueryString(options) : '';\n\t\tconst basicConversationInfos = await (await axios.get(paths.conversations + `/${conversationId}/messages` + queryStr)).data;\n\n\t\treturn basicConversationInfos;\n\t}\n\n\tstatic async addConversationMembers(conversationId: string, userIds: number[]): Promise<void> {\n\t\tawait axios.post(`${paths.conversations}/${conversationId}/add`, { ids: userIds });\n\t}\n\n\tstatic async removeConversationMembers(conversationId: string, userIds: number[]): Promise<void> {\n\t\tawait axios.post(`${paths.conversations}/${conversationId}/remove`, { ids: userIds });\n\t}\n\n}\n\nexport default ServiceRequest;\n","/home/namdang/_workspace/_repos/my_github/chat-app/src/context/context.ts",["131"],"/home/namdang/_workspace/_repos/my_github/chat-app/src/assets/index.js",[],["132","133"],"/home/namdang/_workspace/_repos/my_github/chat-app/src/constants/index.ts",[],"/home/namdang/_workspace/_repos/my_github/chat-app/src/assets/ChannelInfo.js",[],"/home/namdang/_workspace/_repos/my_github/chat-app/src/assets/InviteIcon.js",[],"/home/namdang/_workspace/_repos/my_github/chat-app/src/assets/SearchIcon.js",[],"/home/namdang/_workspace/_repos/my_github/chat-app/src/assets/LightningBolt.js",[],"/home/namdang/_workspace/_repos/my_github/chat-app/src/assets/AddChannel.tsx",[],"/home/namdang/_workspace/_repos/my_github/chat-app/src/assets/CloseCreateChannel.tsx",[],"/home/namdang/_workspace/_repos/my_github/chat-app/src/components/Chat.tsx",["134"],"import React, { useState } from 'react';\nimport { ChatProvider } from '../context/ChatContext';\ninterface IChatProps {\n\tchildren: any;\n}\n\nconst Chat = ({ children }: IChatProps) => {\n\t// useEffect(() => {\n\t// \tif (curUser) {\n\t// \t\tsocket.current = io(apiServer, {\n\t// \t\t\ttransports: ['websocket'],\n\t// \t\t\tauth: {\n\t// \t\t\t\ttoken: localStorage.getItem('token'),\n\t// \t\t\t},\n\t// \t\t\tautoConnect: true,\n\t// \t\t});\n\t// \t\tsocket.current.emit(\"add-user\", curUser.id); // TODO\n\t// \t}\n\t// }, [curUser]);\n\n\treturn (\n\t\t<ChatProvider value={{}}>\n\t\t\t{children}\n\t\t</ChatProvider>\n\n\t);\n};\n\nexport default Chat;\n","/home/namdang/_workspace/_repos/my_github/chat-app/src/context/ChatContext.tsx",[],"/home/namdang/_workspace/_repos/my_github/chat-app/src/components/Channel.tsx",["135","136"],"/home/namdang/_workspace/_repos/my_github/chat-app/src/components/MessageText.tsx",[],"/home/namdang/_workspace/_repos/my_github/chat-app/src/components/ChannelSearch.jsx",[],"/home/namdang/_workspace/_repos/my_github/chat-app/src/components/ResultsDropdown.jsx",[],{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":94,"column":8,"nodeType":"143","messageId":"144","endLine":94,"endColumn":29},{"ruleId":"141","severity":1,"message":"145","line":41,"column":10,"nodeType":"143","messageId":"144","endLine":41,"endColumn":20},{"ruleId":"146","severity":1,"message":"147","line":83,"column":5,"nodeType":"148","endLine":83,"endColumn":7,"suggestions":"149"},{"ruleId":"141","severity":1,"message":"150","line":3,"column":17,"nodeType":"143","messageId":"144","endLine":3,"endColumn":30},{"ruleId":"141","severity":1,"message":"151","line":14,"column":10,"nodeType":"143","messageId":"144","endLine":14,"endColumn":23},{"ruleId":"141","severity":1,"message":"152","line":2,"column":8,"nodeType":"143","messageId":"144","endLine":2,"endColumn":22},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"153","line":1,"column":17,"nodeType":"143","messageId":"144","endLine":1,"endColumn":25},{"ruleId":"141","severity":1,"message":"154","line":2,"column":53,"nodeType":"143","messageId":"144","endLine":2,"endColumn":75},{"ruleId":"141","severity":1,"message":"155","line":11,"column":10,"nodeType":"143","messageId":"144","endLine":11,"endColumn":17},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],"@typescript-eslint/no-unused-vars","'overrideSubmitHandler' is assigned a value but never used.","Identifier","unusedVar","'newChannel' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loading'. Either include it or remove the dependency array.","ArrayExpression",["158"],"'AxiosResponse' is defined but never used.","'checkResponse' is defined but never used.","'ServiceRequest' is defined but never used.","'useState' is defined but never used.","'useChannelStateContext' is defined but never used.","'channel' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"159","fix":"160"},"Update the dependencies array to be: [loading]",{"range":"161","text":"162"},[2092,2094],"[loading]"]